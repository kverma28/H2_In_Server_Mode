CREATE USER student IDENTIFIED BY learn;

--GRANT ALL PRIVILEGES TO student;   -- This is not applicable for H2 database

-- Creating Table 'INSTRUCTOR'
CREATE TABLE INSTRUCTOR
(
 INSTRUCTOR_ID      NUMBER(8,0)     NOT NULL
 ,SALUTATION        VARCHAR2(5)
 ,FIRST_NAME        VARCHAR2(25)
 ,LAST_NAME         VARCHAR2(25)
 ,STREET_ADDRESS    VARCHAR2(50)
 ,ZIP               VARCHAR2(5)
 ,PHONE             VARCHAR2(15)
 ,CREATED_BY        VARCHAR2(30)    NOT NULL
 ,CREATED_DATE      DATE            NOT NULL
 ,MODIFIED_BY       VARCHAR2(30)    NOT NULL
 ,MODIFIED_DATE     DATE            NOT NULL
 );

-- Creating Table 'GRADE'
CREATE TABLE GRADE
(
 STUDENT_ID                 NUMBER(8,0)     NOT NULL
 ,SECTION_ID                NUMBER(8,0)     NOT NULL
 ,GRADE_TYPE_CODE           CHAR(2)         NOT NULL
 ,GRADE_CODE_OCCURRENCE     NUMBER(38,0)    NOT NULL
 ,NUMERIC_GRADE             NUMBER(3,0)     NOT NULL    DEFAULT 0
 ,COMMENTS                  VARCHAR2(2000)
 ,CREATED_BY                VARCHAR2(30)    NOT NULL
 ,CREATED_DATE              DATE            NOT NULL
 ,MODIFIED_BY               VARCHAR2(30)    NOT NULL
 ,MODIFIED_DATE             DATE            NOT NULL
 );

-- Creating Table 'GRADE_TYPE'
CREATE TABLE GRADE_TYPE
 (
 GRADE_TYPE_CODE    CHAR(2)         NOT NULL
 ,DESCRIPTION       VARCHAR2(50)    NOT NULL
 ,CREATED_BY        VARCHAR2(30)
 ,CREATED_DATE      DATE            NOT NULL
 ,MODIFIED_BY       VARCHAR2(30)    NOT NULL
 ,MODIFIED_DATE     DATE            NOT NULL
 );

-- Creating Table 'GRADE_CONVERSION'
CREATE TABLE GRADE_CONVERSION
 (
 LETTER_GRADE       VARCHAR2(2)     NOT NULL
 ,GRADE_POINT       NUMBER(3,2)     NOT NULL    DEFAULT 0
 ,MAX_GRADE         NUMBER(3,0)     NOT NULL
 ,MIN_GRADE         NUMBER(3,0)     NOT NULL
 ,CREATED_BY        VARCHAR2(30)    NOT NULL
 ,CREATED_DATE      DATE            NOT NULL
 ,MODIFIED_BY       VARCHAR2(30)    NOT NULL
 ,MODIFIED_DATE     DATE            NOT NULL
 );

-- Creating Table 'GRADE_TYPE_WEIGHT'
CREATE TABLE GRADE_TYPE_WEIGHT
 (
 SECTION_ID                 NUMBER(8,0)     NOT NULL
 ,GRADE_TYPE_CODE           CHAR(2)         NOT NULL
 ,NUMBER_PER_SECTION        NUMBER(3,0)     NOT NULL
 ,PERCENT_OF_FINAL_GRADE    NUMBER(3,0)     NOT NULL
 ,DROP_LOWEST               CHAR(1)         NOT NULL
 ,CREATED_BY                VARCHAR2(30)    NOT NULL
 ,CREATED_DATE              DATE            NOT NULL
 ,MODIFIED_BY               VARCHAR2(30)    NOT NULL
 ,MODIFIED_DATE             DATE            NOT NULL
 );

-- Creating Table 'SECTION'
CREATE TABLE SECTION
 (
 SECTION_ID         NUMBER(8,0)     NOT NULL
 ,COURSE_NO         NUMBER(8,0)     NOT NULL
 ,SECTION_NO        NUMBER(3,0)     NOT NULL
 ,START_DATE_TIME   DATE
 ,LOCATION          VARCHAR2(50)
 ,INSTRUCTOR_ID     NUMBER(8,0)     NOT NULL
 ,CAPACITY          NUMBER(3,0)
 ,CREATED_BY        VARCHAR2(30)    NOT NULL
 ,CREATED_DATE      DATE            NOT NULL
 ,MODIFIED_BY       VARCHAR2(30)    NOT NULL
 ,MODIFIED_DATE     DATE            NOT NULL
 );

-- Creating Table 'COURSE'
CREATE TABLE COURSE
 (
 COURSE_NO      NUMBER(8,0)     NOT NULL
 ,DESCRIPTION   VARCHAR2(50)    NOT NULL
 ,COST          NUMBER(9,2)
 ,PREREQUISITE  NUMBER(8,0)
 ,CREATED_BY    VARCHAR2(30)    NOT NULL
 ,CREATED_DATE  DATE            NOT NULL
 ,MODIFIED_BY   VARCHAR2(30)    NOT NULL
 ,MODIFIED_DATE DATE            NOT NULL
 );

-- Creating Table 'ENROLLMENT'
CREATE TABLE ENROLLMENT
 (
 STUDENT_ID     NUMBER(8,0)     NOT NULL
 ,SECTION_ID    NUMBER(8,0)     NOT NULL
 ,ENROLL_DATE   DATE            NOT NULL
 ,FINAL_GRADE   NUMBER(3,0)
 ,CREATED_BY    VARCHAR2(30)    NOT NULL
 ,CREATED_DATE  DATE            NOT NULL
 ,MODIFIED_BY   VARCHAR2(30)    NOT NULL
 ,MODIFIED_DATE DATE            NOT NULL
 );

-- Creating Table 'STUDENT'
CREATE TABLE STUDENT
 (
 STUDENT_ID         NUMBER(8,0)     NOT NULL
 ,SALUTATION        VARCHAR2(5)
 ,FIRST_NAME        VARCHAR2(25)
 ,LAST_NAME         VARCHAR2(25)    NOT NULL
 ,STREET_ADDRESS    VARCHAR2(50)
 ,ZIP               VARCHAR2(5)     NOT NULL
 ,PHONE             VARCHAR2(15)
 ,EMPLOYER          VARCHAR2(50)
 ,REGISTRATION_DATE DATE            NOT NULL
 ,CREATED_BY        VARCHAR2(30)    NOT NULL
 ,CREATED_DATE      DATE            NOT NULL
 ,MODIFIED_BY       VARCHAR2(30)    NOT NULL
 ,MODIFIED_DATE     DATE            NOT NULL
 );

-- Creating Table 'ZIPCODE'
CREATE TABLE ZIPCODE
 (
 ZIP            VARCHAR2(5)     NOT NULL
 ,CITY          VARCHAR2(25)
 ,STATE         VARCHAR2(2)
 ,CREATED_BY    VARCHAR2(30)    NOT NULL
 ,CREATED_DATE  DATE            NOT NULL
 ,MODIFIED_BY   VARCHAR2(30)    NOT NULL
 ,MODIFIED_DATE DATE            NOT NULL
 );

-- Creating Primary Key on 'INSTRUCTOR'
ALTER TABLE INSTRUCTOR ADD CONSTRAINT INST_PK PRIMARY KEY (INSTRUCTOR_ID);

-- Creating Primary Key on 'GRADE'
ALTER TABLE GRADE ADD CONSTRAINT GR_PK PRIMARY KEY (STUDENT_ID,SECTION_ID,GRADE_TYPE_CODE,GRADE_CODE_OCCURRENCE);

-- Creating Primary Key on 'GRADE_TYPE'
ALTER TABLE GRADE_TYPE ADD CONSTRAINT GRTYP_PK PRIMARY KEY (GRADE_TYPE_CODE);

-- Creating Primary Key on 'GRADE_CONVERSION'
ALTER TABLE GRADE_CONVERSION ADD CONSTRAINT GRCON_PK PRIMARY KEY (LETTER_GRADE);

-- Creating Primary Key on 'GRADE_TYPE_WEIGHT'
ALTER TABLE GRADE_TYPE_WEIGHT ADD CONSTRAINT GRTW_PK PRIMARY KEY (SECTION_ID,GRADE_TYPE_CODE);

-- Creating Primary Key on 'SECTION'
ALTER TABLE SECTION ADD CONSTRAINT SECT_PK PRIMARY KEY (SECTION_ID);

-- Creating Primary Key on 'COURSE'
ALTER TABLE COURSE ADD CONSTRAINT CRSE_PK PRIMARY KEY (COURSE_NO);

-- Creating Primary Key on 'ENROLLMENT'
ALTER TABLE ENROLLMENT ADD CONSTRAINT ENR_PK PRIMARY KEY (STUDENT_ID,SECTION_ID);

-- Creating Primary Key on 'STUDENT'
ALTER TABLE STUDENT ADD CONSTRAINT STU_PK PRIMARY KEY (STUDENT_ID);

-- Creating Primary Key on 'ZIPCODE'
ALTER TABLE ZIPCODE ADD CONSTRAINT ZIP_PK PRIMARY KEY (ZIP);

-- Creating Unique Keys on 'SECTION'
ALTER TABLE SECTION ADD ( CONSTRAINT SECT_SECT2_UK UNIQUE (SECTION_NO,COURSE_NO));


-- Creating Index 'INST_ZIP_FK_I'
CREATE INDEX INST_ZIP_FK_I ON INSTRUCTOR (ZIP);

-- Creating Index 'GR_GRTW_FK_I'
CREATE INDEX GR_GRTW_FK_I ON GRADE (SECTION_ID,GRADE_TYPE_CODE);

-- Creating Index 'GRTW_GRTYP_FK_I'
CREATE INDEX GRTW_GRTYP_FK_I ON GRADE_TYPE_WEIGHT(GRADE_TYPE_CODE);

-- Creating Index 'SECT_CRSE_FK_I'
CREATE INDEX SECT_CRSE_FK_I ON SECTION(COURSE_NO);

-- Creating Index 'SECT_INST_FK_I'
CREATE INDEX SECT_INST_FK_I ON SECTION (INSTRUCTOR_ID);

-- Creating Index 'CRSE_CRSE_FK_I'
CREATE INDEX CRSE_CRSE_FK_I ON COURSE (PREREQUISITE);

-- Creating Index 'ENR_SECT_FK_I'
CREATE INDEX ENR_SECT_FK_I ON ENROLLMENT (SECTION_ID);

-- Creating Index 'STU_ZIP_FK_I'
CREATE INDEX STU_ZIP_FK_I ON STUDENT (ZIP);


-- Creating Sequence 'INSTRUCTOR_ID_SEQ'
CREATE SEQUENCE INSTRUCTOR_ID_SEQ
 INCREMENT BY 1
 START WITH 112
 NOMAXVALUE
 MINVALUE 1
 NOCYCLE
 NOCACHE
;

-- Creating Sequence 'SECTION_ID_SEQ'
CREATE SEQUENCE SECTION_ID_SEQ
 INCREMENT BY 1
 START WITH 158
 NOMAXVALUE
 MINVALUE 1
 NOCYCLE
 NOCACHE
;

-- Creating Sequence 'STUDENT_ID_SEQ'
CREATE SEQUENCE STUDENT_ID_SEQ
 INCREMENT BY 1
 START WITH 401
 NOMAXVALUE
 MINVALUE 1
 NOCYCLE
 NOCACHE
;

-- Creating Sequence 'COURSE_NO_SEQ'
CREATE SEQUENCE COURSE_NO_SEQ
 INCREMENT BY 1
 START WITH 452
 NOMAXVALUE
 MINVALUE 1
 NOCYCLE
 NOCACHE
;

--Tables for spring security authentication

create table USERS(
    USERNAME VARCHAR(50) not null primary key,
    PASSWORD VARCHAR(50) not null,
    ENABLED BOOLEAN not null
);

create table AUTHORITIES (
    USERNAME VARCHAR(50) not null,
    AUTHORITY VARCHAR(50) not null,
    constraint fk_authorities_users foreign key(username) references users(username)
);

create unique index ix_auth_username on authorities (username,authority);